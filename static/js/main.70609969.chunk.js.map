{"version":3,"sources":["reducers/index.js","reducers/users.reducer.js","reducers/questions.reducer.js","reducers/authentication.reducer.js","store.js","routers/PublicRoute.js","routers/PrivateRoute.js","actions/authentication.action.js","pages/login/Login.page.js","pages/login/Login.util.js","utils/_DATA.js","actions/questions.action.js","pages/home/new-question/NewQuestion.page.js","pages/home/leaderboard/components/leader-board-card/LeaderBoardCard.js","utils/index.js","pages/home/leaderboard/LeaderBoard.util.js","pages/home/leaderboard/LeaderBoard.page.js","components/question-card/components/vote-card/VoteCard.js","components/question-card/QuestionCard.js","pages/home/questions/Questions.util.js","pages/home/questions/Questions.page.js","pages/home/question-detail/QuestionDetail.page.js","pages/home/question-not-found/QuestionNotFound.page.js","components/header/Header.js","pages/home/Home.page.js","actions/users.action.js","App.js","index.js"],"names":["combineReducers","users","state","data","action","type","response","isFetching","id","answer","userId","currentAnswers","answers","error","author","questions","concat","votes","filter","e","authentication","user","undefined","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","compose","store","createStore","reducers","applyMiddleware","thunk","connect","isAuthenticated","Component","component","rest","props","to","render","pathname","from","location","SET_AUTHENTICATED_USER","dispatch","a","LoginPage","handleUserChange","setState","value","handleClickSignIn","authenticate","history","push","userOptions","Object","keys","map","key","text","name","image","avatar","src","avatarURL","convertUsersToOptions","this","className","Card","Content","Header","Meta","Form","Dropdown","placeholder","fluid","selection","options","onChange","extra","Button","onClick","authenticationActions","sarahedo","tylermcginnis","johndoe","timestamp","optionOne","optionTwo","_saveQuestion","question","Promise","res","rej","authedUser","formattedQuestion","optionOneText","optionTwoText","Math","random","toString","substring","Date","now","formatQuestion","setTimeout","_saveQuestionAnswer","qid","FETCHING_REQUEST","LOAD_QUESTIONS_SUCCESS","ADD_QUESTION","SET_QUESTION_ANSWER","getState","NewQuestionPage","enableValidation","handleSubmit","preventDefault","addQuestion","then","Container","Dimmer","active","Loader","Segment","basic","Field","required","as","Input","Label","color","pointing","Divider","horizontal","style","textAlign","float","marginTop","fontSize","authenticatedUserId","questionActions","colorFromPlace","place","LeaderBoardCard","item","score","answersCount","length","questionsCount","corner","icon","Grid","columns","Row","stretched","Column","width","Image","Statistic","size","Value","convertObjectToArray","object","isEmptyObject","getUserScore","LeaderBoardPage","userList","sort","b","generateAndOrderByScore","Group","index","calculatePercentage","total","round","easterEgg","toLowerCase","VoteCard","isSelected","isAnswered","totalVotes","onAnswerSelected","numberVotes","handleAnswerSelected","ribbon","padding","Progress","percent","progress","indicating","square","height","top","QuestionCard","isAnswerMode","isLoading","onClickBack","onOpenQuestion","answered","Icon","Feed","Event","Summary","href","moment","fromNow","stackable","verticalAlign","vertical","circular","inverted","doesUserVoteInThisQuestion","includes","filterByOptions","QuestionsPage","filterBy","handleOpenQuestion","handleFilterByChange","questionList","orderQuestions","doesUserVote","filterQuestions","widths","inline","control","Radio","label","checked","centered","QuestionDetailPage","getQuestionId","setAnswer","handleBack","match","params","authenticatedUser","questionNotFound","QuestionNotFoundPage","onClickItem","onClickLogout","handleItemClick","route","Menu","secondary","Item","position","trigger","HomePage","handleChangeRoute","handleLogout","logout","loadQuestions","userAuthenticated","path","exact","QuestionsDetailPage","LOAD_USERS_SUCCESS","App","loadUsers","basename","userActions","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.70609969.chunk.js","sourcesContent":["// Libraries\nimport {combineReducers} from \"redux\";\n\n// Reducers\nimport users from './users.reducer' // This reducers handle all users data\nimport questions from './questions.reducer' // This reducer handle all questions data\nimport authentication from './authentication.reducer' // this reducer handle all authentication information\n\n// Combine the reducer using the library combine reducers so it can be use in the configuration of the store\nexport default combineReducers({\n   users,\n   questions,\n   authentication\n})\n","// This reducer handle all user data\nexport default (state = {data: {}}, action = {}) => {\n   // Type is the action to be executed and response will centralize all the data that pass through\n   const {type, response} = action;\n\n   switch (type) {\n      // This case is used to let now the application that the users is being fetch\n      case 'IS_FETCHING_USERS': {\n         return {\n            ...state,\n            isFetching: true\n         };\n      }\n\n      // If the users load failed the this case will handle all necessary logic\n      case 'LOAD_USERS_FAILURE': {\n         return {\n            ...state,\n            isFetching: false\n         };\n      }\n\n      // Because we are using the optimistic update pattern we need to revert all information if the API call's failed\n      // This case will handle if the answer failed to be store in the API call\n      case 'SET_QUESTION_ANSWER_FAILURE': {\n         const {id, answer, userId} = response;\n         const currentAnswers = {\n            ...state.data[userId].answers,\n            [id]: answer\n         };\n         delete currentAnswers[id];\n         return {\n            ...state,\n            data: {\n               ...state.data,\n               [userId]: {\n                  ...state.data[userId],\n                  answers: currentAnswers\n               }\n            },\n            error: null,\n            isFetching: false\n         };\n      }\n\n      // Update the user if the has respond a new question\n      case 'SET_QUESTION_ANSWER_SUCCESS': {\n         const {id, answer, userId} = response;\n         // Using the spread operator we update only the necessary information\n         return {\n            ...state,\n            data: {\n               ...state.data,\n               [userId]: {\n                  ...state.data[userId],\n                  answers: {\n                     ...state.data[userId].answers,\n                     [id]: answer\n                  }\n               }\n            },\n            error: null,\n            isFetching: false\n         };\n      }\n\n      // This case will handle when the user creates a new question\n      case 'ADD_QUESTIONS_SUCCESS': {\n         // Using the spread operator we update only the necessary information\n         return {\n            ...state,\n            data: {\n               ...state.data,\n               [response.author]: {\n                  ...state.data[response.author],\n                  questions: state.data[response.author].questions.concat([response.id])\n               }\n            },\n            error: null,\n            isFetching: false\n         };\n      }\n\n      // This case will load all the users from the API\n      case 'LOAD_USERS_SUCCESS': {\n         return {\n            ...state,\n            data: response,\n            error: null,\n            isFetching: false\n         };\n      }\n\n      // In case that an not handle action is being executed the reducer will return the current state without modification\n      default: {\n         return state;\n      }\n   }\n};\n","export default (state = {data: {}}, action = {}) => {\n   // Type is the action to be executed and response will centralize all the data that pass through\n   const {type, response} = action;\n\n   switch (type) {\n      // This case is used to let now the application that the questions is being fetch\n      case 'IS_FETCHING_QUESTIONS': {\n         return {\n            ...state,\n            isFetching: true\n         };\n      }\n\n      // This case will handle when the user creates a new question\n      case 'ADD_QUESTIONS_SUCCESS': {\n         // Using the spread operator we update only the necessary information\n         return {\n            ...state,\n            data: {\n               ...state.data,\n               [response.id]: response\n            },\n            error: null,\n            isFetching: false\n         };\n      }\n\n      // This case will handle all logic of the answer\n      case 'SET_QUESTION_ANSWER_SUCCESS': {\n         const {id, userId, answer} = response;\n         // Using the spread operator we update only the necessary information\n         return {\n            ...state,\n            data: {\n               ...state.data,\n               [response.id]: {\n                  ...state.data[id],\n                  [answer]: {\n                     ...state.data[id][answer],\n                     votes: state.data[id][answer].votes.concat([userId])\n                  }\n               }\n            },\n            error: null,\n            isFetching: false\n         };\n      }\n\n\n      // Because we are using the optimistic update pattern we need to revert all information if the API call's failed\n      // This case will handle if the answer failed to be store in the API call\n      case 'SET_QUESTION_ANSWER_FAILURE': {\n         const {id, userId, answer} = response;\n         // Using the spread operator we update only the necessary information\n         return {\n            ...state,\n            data: {\n               ...state.data,\n               [response.id]: {\n                  ...state.data[id],\n                  [answer]: {\n                     ...state.data[id][answer],\n                     votes: state.data[id][answer].votes.filter(e => e !== userId)\n                  }\n               }\n            },\n            error: null,\n            isFetching: false\n         };\n      }\n\n      // This case will load all the questions from the API\n      case 'LOAD_QUESTIONS_SUCCESS': {\n         return {\n            ...state,\n            data: response,\n            error: null,\n            isFetching: false\n         };\n      }\n\n      // In case that an not handle action is being executed the reducer will return the current state without modification\n      default: {\n         return state;\n      }\n   }\n};\n","// This reducer contain all the information of the authenticated user\nexport default (state = {user: undefined}, action = {}) => {\n   // Type is the action to be executed and response will centralize all the data that pass through\n   const {type, response} = action;\n\n   switch (type) {\n      // This case handle when the user is authenticated\n      case 'AUTHENTICATED': {\n         return {\n            ...state,\n            user: response\n         };\n      }\n\n      // This case remove the user authenticated when the user log out\n      case 'LOG_OUT': {\n         return {\n            ...state,\n            user: undefined\n         }\n      }\n\n      // In case that an not handle action is being executed the reducer will return the current state without modification\n      default: {\n         return state;\n      }\n   }\n};\n","// Libraries\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk'\n\n// List of all the reducers\nimport reducers from './reducers';\n\n// Configure redux extension used in Chrome\nconst composeEnhancers = (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n   trace: true,\n   traceLimit: 25\n})) || compose;\n\n// Create the store that will contain all the application data and the functions you can use to manipulated\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;\n","// Libraries\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport {Route, Redirect} from 'react-router-dom';\nimport PropTypes from \"prop-types\";\n\n// This is a custom route that defines the logic when the user access to a public route\nconst PublicRoute = ({\n                        isAuthenticated,\n                        component: Component,\n                        ...rest\n                     }) => (\n   <Route {...rest} component={(props) => (\n      isAuthenticated ? (\n         // If the user is already log in it will redirect the user to the home page\n         <Redirect to=\"/\"/>\n      ) : (\n         <Component {...props} />\n      )\n   )}/>\n);\n\nPublicRoute.propTypes = {\n   isAuthenticated: PropTypes.any,\n   component: PropTypes.any.isRequired,\n   ...Route.propTypes\n};\n\nconst mapStateToProps = (state) => ({\n   isAuthenticated: state.authentication.user != null // Validate if the user is authenticated\n});\n\nexport default connect(mapStateToProps)(PublicRoute);\n","// Libraries\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect, Route} from 'react-router-dom';\nimport PropTypes from \"prop-types\";\n\n// This is a custom route that define what should happen when the user enter in a private route.\nconst PrivateRoute = ({\n                         isAuthenticated,\n                         component: Component,\n                         ...rest\n                      }) => (\n   <Route {...rest} render={(props) => (\n      isAuthenticated ? (\n         <Component {...props} />\n      ) : (\n         // If the user is not authenticated it will be redirected to the login, saving the route that try to access,\n         // To redirect to that route after the login\n         <Redirect to={{pathname: '/login', state: {from: props.location}}}/>\n      )\n   )}/>\n);\n\nPrivateRoute.propTypes = {\n   isAuthenticated: PropTypes.any,\n   component: PropTypes.any,\n   ...Route.propTypes\n};\n\nconst mapStateToProps = (state) => ({\n   isAuthenticated: state.authentication.user != null\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","/**\n * @description This functions returns an object with all you need to login an user\n * @param {string} id\n * @returns {object} object with all you need to trigger the authenticated action\n */\nconst SET_AUTHENTICATED_USER = (id) => ({\n   type: 'AUTHENTICATED',\n   response: {id}\n});\n\n/**\n * @description This functions returns an object with all you need to log out an user\n * @returns {object} object with all you need to trigger the log out action\n */\nconst LOGOUT = () => ({type: 'LOG_OUT'});\n\n/**\n * @description Action that authenticate the user selected\n */\nexport const authenticate = (id) => async (dispatch) => {\n   dispatch(SET_AUTHENTICATED_USER(id));\n};\n\n/**\n * @description Action that logout the current user\n */\nexport const logout = () => async (dispatch) => {\n   dispatch(LOGOUT());\n};\n\n\nexport default {authenticate, logout}\n","// Libraries\nimport React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {Button, Card, Dropdown, Form} from \"semantic-ui-react\";\n\n// Actions\nimport authenticationActions from \"../../actions/authentication.action\";\n\n// Utils\nimport {convertUsersToOptions} from \"./Login.util\";\n\n// Style\nimport './Login.css'\n\nclass LoginPage extends Component {\n   state = {\n      userId: undefined // This variable of the state will hold the user selected account\n   };\n\n   // This function will update the state when the user selected an account to login in\n   handleUserChange = (e, data) => this.setState({userId: data.value});\n\n   // This function will handle when the user click on the sign in button\n   handleClickSignIn = () => {\n      const {userId} = this.state;\n      const {users} = this.props;\n      if (users[userId]) {\n         // If is a valid user it will authenticated the user with that account\n         this.props.authenticate(userId);\n\n         // In case of the user attempt to access a private route before this code will redirect the user to the\n         // route that try to access the first time\n         const {location} = this.props;\n         // This information was handle before in the PrivateRoute.js file\n         if(location.state && location.state.from) {\n            this.props.history.push(location.state.from);\n         }\n      }\n\n   };\n\n   render() {\n      const {users} = this.props;\n      // Convert all the users into a option array\n      const userOptions = convertUsersToOptions(users);\n      return (\n         <div className='Login'>\n            <Card>\n               <Card.Content>\n                  <Card.Header>Welcome to the Would You Rather App</Card.Header>\n                  <Card.Meta>\n                     <span className='date'>Please sign in to continue</span>\n                  </Card.Meta>\n               </Card.Content>\n               <Card.Content>\n                  <Form>\n                     <label>Select your username:</label>\n                     <Dropdown\n                        placeholder='Select Friend'\n                        fluid\n                        selection\n                        options={userOptions}\n                        onChange={this.handleUserChange}\n                     />\n                  </Form>\n               </Card.Content>\n               <Card.Content extra>\n                  <Button fluid onClick={this.handleClickSignIn}>Sign in</Button>\n               </Card.Content>\n            </Card>\n         </div>\n      );\n   }\n}\n\nLoginPage.propTypes = {};\n\nconst mapStateToProps = (state) => ({\n   users: state.users.data\n});\nconst mapDispatchToProps = (dispatch) => ({\n   authenticate: (id) => dispatch(authenticationActions.authenticate(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage)\n","/**\n * @description Convert users object to list of options\n * @param {object} users\n * @returns {array} Array of options from the users object\n */\nexport const convertUsersToOptions = (users) => {\n   return Object.keys(users).map((key) => ({\n      key: users[key].id, value: users[key].id, text: users[key].name,\n      image: {avatar: true, src: users[key].avatarURL},\n   }));\n};\n","let users = {\n   sarahedo: {\n      id: 'sarahedo',\n      name: 'Sarah Edo',\n      avatarURL: 'https://react.semantic-ui.com/images/avatar/large/jenny.jpg',\n      answers: {\n         \"8xf0y6ziyjabvozdd253nd\": 'optionOne',\n         \"6ni6ok3ym7mf1p33lnez\": 'optionTwo',\n         \"am8ehyc8byjqgar0jgpub9\": 'optionTwo',\n         \"loxhs1bqm25b708cmbf3g\": 'optionTwo'\n      },\n      questions: ['8xf0y6ziyjabvozdd253nd', 'am8ehyc8byjqgar0jgpub9']\n   },\n   tylermcginnis: {\n      id: 'tylermcginnis',\n      name: 'Tyler McGinnis',\n      avatarURL: 'https://react.semantic-ui.com/images/avatar/large/elliot.jpg',\n      answers: {\n         \"vthrdm985a262al8qx3do\": 'optionOne',\n         \"xj352vofupe1dqz9emx13r\": 'optionTwo',\n      },\n      questions: ['loxhs1bqm25b708cmbf3g', 'vthrdm985a262al8qx3do'],\n   },\n   johndoe: {\n      id: 'johndoe',\n      name: 'John Doe',\n      avatarURL: 'https://react.semantic-ui.com/images/avatar/large/daniel.jpg',\n      answers: {\n         \"xj352vofupe1dqz9emx13r\": 'optionOne',\n         \"vthrdm985a262al8qx3do\": 'optionTwo',\n         \"6ni6ok3ym7mf1p33lnez\": 'optionTwo'\n      },\n      questions: ['6ni6ok3ym7mf1p33lnez', 'xj352vofupe1dqz9emx13r'],\n   }\n};\n\nlet questions = {\n   \"8xf0y6ziyjabvozdd253nd\": {\n      id: '8xf0y6ziyjabvozdd253nd',\n      author: 'sarahedo',\n      timestamp: 1467166872634,\n      optionOne: {\n         votes: ['sarahedo'],\n         text: 'have horrible short term memory',\n      },\n      optionTwo: {\n         votes: [],\n         text: 'have horrible long term memory'\n      }\n   },\n   \"6ni6ok3ym7mf1p33lnez\": {\n      id: '6ni6ok3ym7mf1p33lnez',\n      author: 'johndoe',\n      timestamp: 1468479767190,\n      optionOne: {\n         votes: [],\n         text: 'become a superhero',\n      },\n      optionTwo: {\n         votes: ['johndoe', 'sarahedo'],\n         text: 'become a supervillain'\n      }\n   },\n   \"am8ehyc8byjqgar0jgpub9\": {\n      id: 'am8ehyc8byjqgar0jgpub9',\n      author: 'sarahedo',\n      timestamp: 1488579767190,\n      optionOne: {\n         votes: [],\n         text: 'be telekinetic',\n      },\n      optionTwo: {\n         votes: ['sarahedo'],\n         text: 'be telepathic'\n      }\n   },\n   \"loxhs1bqm25b708cmbf3g\": {\n      id: 'loxhs1bqm25b708cmbf3g',\n      author: 'tylermcginnis',\n      timestamp: 1482579767190,\n      optionOne: {\n         votes: [],\n         text: 'be a front-end developer',\n      },\n      optionTwo: {\n         votes: ['sarahedo'],\n         text: 'be a back-end developer'\n      }\n   },\n   \"vthrdm985a262al8qx3do\": {\n      id: 'vthrdm985a262al8qx3do',\n      author: 'tylermcginnis',\n      timestamp: 1489579767190,\n      optionOne: {\n         votes: ['tylermcginnis'],\n         text: 'find $50 yourself',\n      },\n      optionTwo: {\n         votes: ['johndoe'],\n         text: 'have your best friend find $500'\n      }\n   },\n   \"xj352vofupe1dqz9emx13r\": {\n      id: 'xj352vofupe1dqz9emx13r',\n      author: 'johndoe',\n      timestamp: 1493579767190,\n      optionOne: {\n         votes: ['johndoe'],\n         text: 'write JavaScript',\n      },\n      optionTwo: {\n         votes: ['tylermcginnis'],\n         text: 'write Swift'\n      }\n   },\n};\n\nfunction generateUID() {\n   return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n}\n\nexport function _getUsers() {\n   return new Promise((res, rej) => {\n      setTimeout(() => res({...users}), 1000)\n   })\n}\n\nexport function _getQuestions() {\n   return new Promise((res, rej) => {\n      setTimeout(() => res({...questions}), 1000)\n   })\n}\n\nfunction formatQuestion({optionOneText, optionTwoText, author}) {\n   return {\n      id: generateUID(),\n      timestamp: Date.now(),\n      author,\n      optionOne: {\n         votes: [],\n         text: optionOneText,\n      },\n      optionTwo: {\n         votes: [],\n         text: optionTwoText,\n      }\n   }\n}\n\nexport function _saveQuestion(question) {\n   return new Promise((res, rej) => {\n      const authedUser = question.author;\n      const formattedQuestion = formatQuestion(question);\n\n      setTimeout(() => {\n         questions = {\n            ...questions,\n            [formattedQuestion.id]: formattedQuestion\n         };\n\n         users = {\n            ...users,\n            [authedUser]: {\n               ...users[authedUser],\n               questions: users[authedUser].questions.concat([formattedQuestion.id])\n            }\n         };\n\n         res(formattedQuestion)\n      }, 1000)\n   })\n}\n\nexport function _saveQuestionAnswer({authedUser, qid, answer}) {\n   return new Promise((res, rej) => {\n      setTimeout(() => {\n         users = {\n            ...users,\n            [authedUser]: {\n               ...users[authedUser],\n               answers: {\n                  ...users[authedUser].answers,\n                  [qid]: answer\n               }\n            }\n         };\n\n         questions = {\n            ...questions,\n            [qid]: {\n               ...questions[qid],\n               [answer]: {\n                  ...questions[qid][answer],\n                  votes: questions[qid][answer].votes.concat([authedUser])\n               }\n            }\n         };\n\n         res()\n      }, 500)\n   })\n}\n","// API\nimport {_getQuestions, _saveQuestion, _saveQuestionAnswer} from \"../utils/_DATA\";\n\n/**\n * @description This functions returns an object with all you need trigger the fetching of questions\n * @returns {object} object with all you need to trigger the fetching action\n */\nconst FETCHING_REQUEST = {\n   type: 'IS_FETCHING_QUESTIONS',\n   response: true\n};\n\n/**\n * @description This functions returns an object with all you need to load the questions\n * @param {object} questions\n * @returns {object} object with all you need to trigger the load questions action\n */\nconst LOAD_QUESTIONS_SUCCESS = (questions) => ({\n   type: 'LOAD_QUESTIONS_SUCCESS',\n   response: questions\n});\n\n/**\n * @description This functions returns an object with all you need to add a new questions\n * @param {object} question\n * @returns {object} object with all you need to trigger the add question action\n */\nconst ADD_QUESTION = (question) => ({\n   type: 'ADD_QUESTIONS_SUCCESS',\n   response: question\n});\n\n/**\n * @description This functions returns an object with all you need to set answer in a question\n * @param {string} id\n * @param {string} userId\n * @param {string} answer\n * @returns {object} object with all you need to trigger the set question answer\n */\nconst SET_QUESTION_ANSWER = (id, userId, answer) => ({\n   type: 'SET_QUESTION_ANSWER_SUCCESS',\n   response: {id, userId, answer}\n});\n\n\n/**\n * @description Action that load all questions from the API\n */\nexport const load = () => async (dispatch) => {\n   // Let know the application that we are fetching the questions\n   dispatch(FETCHING_REQUEST);\n   const questions = await _getQuestions();\n   // Load questions in the store state\n   dispatch(LOAD_QUESTIONS_SUCCESS(questions));\n};\n\n/**\n * @description Action that add a new question\n * @param {string} optionOneText\n * @param {string} optionTwoText\n */\nexport const add = (optionOneText, optionTwoText) => async (dispatch, getState) => {\n   const state = getState();\n   const {id: userId} = state.authentication.user;\n   // Let know the application that we are fetching the questions\n   dispatch(FETCHING_REQUEST);\n   const question = await _saveQuestion({optionOneText, optionTwoText, author: userId});\n   // Add the new question to the store state\n   dispatch(ADD_QUESTION(question))\n};\n\n/**\n * @description Action that add the vote to the question\n * @param {string} id\n * @param {string} answer\n */\nexport const setAnswer = (id, answer) => async (dispatch, getState) => {\n   // Let know the application that we are fetching the questions\n   dispatch(FETCHING_REQUEST);\n   const state = getState();\n   const {id: userId} = state.authentication.user;\n   // Add new vote to the question in the store state\n   dispatch(SET_QUESTION_ANSWER(id, userId, answer));\n   // Add vote the API\n   // We are using the Optimistic Update to update the UI before calling the API to improve the behavior of the app\n   return _saveQuestionAnswer({authedUser: userId, qid: id, answer});\n};\n\n\nexport default {add, load, setAnswer}\n","// Libraries\nimport React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {\n   Container,\n   Segment,\n   Loader,\n   Dimmer,\n   Form,\n   Header,\n   Input,\n   Label,\n   Divider,\n   Card,\n   Button\n} from \"semantic-ui-react\";\n\n// Actions\nimport questionActions from \"../../../actions/questions.action\";\n\n\nclass NewQuestionPage extends Component {\n   state = {\n      optionOne: '',\n      optionTwo: '',\n      enableValidation: false,\n   };\n\n   // This code will handle when the user created a new question\n   handleSubmit = (e) => {\n      e.preventDefault();\n      const {optionOne, optionTwo} = this.state;\n      if (optionTwo === '' || optionTwo === '') {\n         this.setState({enableValidation: true});\n         return;\n      }\n      this.setState({enableValidation: false});\n      this.props.addQuestion(optionOne, optionTwo).then(() => this.props.history.push('/'));\n   };\n\n   render() {\n      const {enableValidation, optionOne, optionTwo} = this.state;\n      const {isFetching} = this.props;\n      return (\n         <Container className='QuestionsPage'>\n            <Dimmer active={isFetching}>\n               <Loader/>\n            </Dimmer>\n            <Segment basic>\n               <Card fluid>\n                  <Card.Content>\n                     <Card.Header>Create new question</Card.Header>\n                     <Form>\n                        <Form.Field required>\n                           <div>Complete the question</div>\n                           <Header as='h2'>Would you rather...</Header>\n                        </Form.Field>\n                        <Form.Field required>\n                           <Input placeholder='Enter option one text here'\n                                  onChange={(e, {value}) => this.setState({optionOne: value})}/>\n                           {enableValidation && optionOne === '' && <Label basic color='red' pointing>\n                              Please enter a value\n                           </Label>}\n                        </Form.Field>\n                        <Divider horizontal>Or</Divider>\n                        <Form.Field>\n                           <Input placeholder='Enter option two text here'\n                                  onChange={(e, {value}) => this.setState({optionTwo: value})}/>\n                           {enableValidation && optionTwo === '' && <Label basic color='red' pointing>\n                              Please enter a value\n                           </Label>}\n                        </Form.Field>\n                     </Form>\n                  </Card.Content>\n                  <Card.Content extra style={{textAlign:'right'}}>\n                     <span style={{float: 'left', marginTop: '10px', fontSize: '8px'}}>Hey. psst. Yes you!. If you are fan of Re-zero. Type the twins ;)</span>\n                     <Button onClick={this.handleSubmit}>Submit</Button>\n                  </Card.Content>\n               </Card>\n            </Segment>\n         </Container>\n      );\n   }\n}\n\nNewQuestionPage.propTypes = {};\n\nconst mapStateToProps = (state) => {\n   const users = state.users.data;\n   const {user = {}} = state.authentication;\n   return {\n      users,\n      isFetching: state.questions.isFetching,\n      questions: state.questions.data,\n      authenticatedUserId: user.id\n   }\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n   addQuestion: (optionOneText, optionTwoText) => dispatch(questionActions.add(optionOneText, optionTwoText))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewQuestionPage);\n","// Libraries\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Card, Grid, Header, Image, Label, Segment, Statistic} from \"semantic-ui-react\";\n\n// Style\nimport './LeaderBoardCard.css'\n\n/**\n * @description Based on the place return a color representing the number of the place\n * @param {number} place\n * @returns {string} Returns a color that represents the place passed\n */\nconst colorFromPlace = (place) => {\n   switch (place) {\n      case 1:\n         return 'yellow';\n      case 2:\n         return 'grey';\n      case 3:\n         return 'brown';\n      default:\n         return 'red'\n   }\n};\n\nconst LeaderBoardCard = (props) => {\n   const {item, place} = props;\n   const {avatarURL, score} = item;\n\n   // Get the number of answers\n   const answersCount = Object.keys(item.answers || {}).length;\n   // Get the number of questions created\n   const questionsCount = item.questions ? item.questions.length : 0;\n   return (\n      <Card className='LeaderBoardCard' fluid>\n         {place && place <= 3 && <Label as='a' color={colorFromPlace(place)} corner icon='trophy'/>}\n            <Grid columns={3}>\n               <Grid.Row stretched>\n                  <Grid.Column width={3}>\n                     <Image src={avatarURL}/>\n                  </Grid.Column>\n                  <Grid.Column  width={9}>\n                     <Segment basic><Header as='h1'>{item.name}</Header></Segment>\n                     <Segment basic>\n                        <Header as='h2'>Answered Questions: {answersCount}</Header>\n                        <Header as='h2'>Created Questions: {questionsCount}</Header>\n                     </Segment>\n                  </Grid.Column>\n                  <Grid.Column width={3}>\n                     <div className='score-statistics'>\n                        <Statistic size='huge'>\n                           <Statistic.Value>{score}</Statistic.Value>\n                           <Statistic.Label>Score</Statistic.Label>\n                        </Statistic>\n                     </div>\n                  </Grid.Column>\n               </Grid.Row>\n            </Grid>\n      </Card>\n   );\n};\n\nLeaderBoardCard.propTypes = {\n   item: PropTypes.object,\n   place: PropTypes.number,\n};\n\nexport default LeaderBoardCard;\n","/**\n * @description Convert object to array\n * @param {object} object\n * @returns {array} Array from the object\n */\nexport const convertObjectToArray = (object) => {\n   return Object.keys(object).map((e) => object[e]);\n};\n\n/**\n * @description Check if the receive object is empty\n * @param {object} object\n * @returns {boolean} Returns true if the object has not property\n */\nexport const isEmptyObject = (object) => Object.keys(object).length <= 0;\n","/**\n * @description Generate score for every user in the array and sort the array based on the score\n * @param {array} users\n * @returns {array} Array that contain all the users sorted with a score\n */\nexport const generateAndOrderByScore = (users = []) => users.map(e => ({\n   ...e,\n   score: getUserScore(e)\n})).sort((a, b) => b.score - a.score);\n\n\n/**\n * @description Returns the score of the user based on the questions created and the answers\n * @param {object} user\n * @returns {number} Number that represent the score of the user\n */\nexport const getUserScore = (user) => {\n   let score = 0;\n   score += Object.keys(user.answers || {}).length;\n   score += user.questions ? user.questions.length : 0;\n   return score;\n};\n","// Libraries\nimport React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {Card, Container, Segment} from \"semantic-ui-react\";\n\n// Components\nimport LeaderBoardCard from \"./components/leader-board-card/LeaderBoardCard\";\n\n// Utils\nimport {convertObjectToArray} from \"../../../utils\";\nimport {generateAndOrderByScore} from \"./LeaderBoard.util\";\n\nclass LeaderBoardPage extends Component {\n   render() {\n      const {users = {}} = this.props;\n      // Convert users to array and created a new user list that contains the score of the user and it's sorted by the score\n      const userList = generateAndOrderByScore(convertObjectToArray(users));\n      return (\n         <Container>\n            <Segment>\n               <Card.Group>\n                  {userList && userList.map((e, index) => <LeaderBoardCard key={e.id} item={e} place={index + 1}/>)}\n               </Card.Group>\n            </Segment>\n         </Container>\n      );\n   }\n}\n\nconst mapStateToProps = (state) => ({\n   users: state.users.data,\n});\n\nexport default connect(mapStateToProps)(LeaderBoardPage);\n","// Libraries\nimport React from \"react\";\nimport {Card, Header, Label, Progress} from \"semantic-ui-react\";\n\n/**\n * @description Calculate the percentage of votes of this answer based on the total of votes\n * @param {number} total\n * @param {number} votes\n * @returns {number} Return the percentage of this answer\n */\nconst calculatePercentage = (total, votes) => Math.round(votes / total * 100);\n\n/**\n * @description This function return a funny easter egg of the fans of Re-zero\n * @param {string} text\n * @returns {string} Return a string depending if the user type the correct answers in the option one and two\n */\nconst easterEgg = (text = '') => {\n   switch (text.toLowerCase()) {\n      case 'rem':\n         return 'easter-egg-1';\n      case 'ram':\n         return 'easter-egg-2';\n      default:\n         return '';\n   }\n};\n\nconst VoteCard = ({item, isSelected, isAnswered, totalVotes, onAnswerSelected, value}) => {\n   const {votes, text} = item;\n   const numberVotes = votes ? votes.length : 0;\n   // if the user already answer this question, it will not allow the user to click in this option\n   const handleAnswerSelected = !isAnswered ? () => onAnswerSelected(value) : undefined;\n\n   return (\n      <Card fluid onClick={handleAnswerSelected} className={`VoteCard ${easterEgg(text)}`}>\n         {isSelected && <Label as='a' color='blue' ribbon>Your Vote</Label>}\n         <Card.Content>\n            <Header as='h1'>{text}</Header>\n            {isAnswered && (\n               <div style={{width: '100%', padding: '0 3rem'}}>\n                  <Progress percent={calculatePercentage(totalVotes, numberVotes)} progress\n                            indicating/>\n                  <Header as='h4'>{`${numberVotes} out of ${totalVotes} votes`}</Header>\n               </div>\n            )}\n         </Card.Content>\n      </Card>\n   )\n};\n\n\nexport default VoteCard;\n","// Libraries\nimport React from 'react';\nimport {Button, Card, Dimmer, Divider, Feed, Grid, Header, Icon, Loader, Segment} from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\n\n// Components\nimport VoteCard from \"./components/vote-card/VoteCard\";\n\n// Style\nimport './QuestionCard.css'\nconst square = {width: 100, height: 100, top: -50};\n\nconst QuestionCard = (props) => {\n   const {user = {}, question = {}, author = {}, fluid, isAnswerMode, onAnswerSelected, isLoading = false, onClickBack} = props;\n   const {onOpenQuestion} = props;\n\n   // This function will handle when the user click in open the poll question\n   const handleOpenQuestion = () => {\n      if (onOpenQuestion) {\n         onOpenQuestion(question.id);\n      }\n   };\n\n   // This function will handle when the user click on one of the options available\n   const handleAnswerSelected = (answered) => {\n      if (answer == null && onAnswerSelected) {\n         onAnswerSelected(answered);\n      }\n   };\n\n   const {optionOne = {}, optionTwo = {}} = question;\n\n   let answer;\n   // Search if the user already answer this question\n   if (user.answers) {\n      answer = user.answers[question.id];\n   }\n\n   let totalVotes = 0;\n   // Calculate the total of votes that the question has\n   if (optionOne && optionOne.votes) {\n      totalVotes += optionOne.votes.length;\n   }\n   if (optionTwo && optionTwo.votes) {\n      totalVotes += optionTwo.votes.length;\n   }\n\n\n   return (\n      <Card fluid={fluid} className={`QuestionCard ${isAnswerMode ? 'answer-mode' : ''}`}>\n         <Dimmer active={isLoading}>\n            <Loader/>\n         </Dimmer>\n         <Card.Content>\n            <div className='card-header'>\n               {onClickBack && <Icon name='arrow left' onClick={onClickBack} className='back-button'/>}\n               <Feed>\n                  <Feed.Event>\n                     <Feed.Label image={author.avatarURL}/>\n                     <Feed.Content>\n                        <Feed.Summary>\n                           <div className='author-name'>\n                              <a href='/'>{author.name}</a> asks\n                           </div>\n                           <Card.Meta className='created-date'>\n                              <span className='date'>{moment(question.timestamp).fromNow()}</span>\n                           </Card.Meta>\n                        </Feed.Summary>\n                     </Feed.Content>\n                  </Feed.Event>\n               </Feed>\n            </div>\n         </Card.Content>\n         <Card.Content>\n            <div className='question-title'>\n               <Header as='h2'>Would you rather?</Header>\n            </div>\n            {isAnswerMode && (\n               <div className='answers'>\n                  <Grid columns={2} stackable textAlign='center'>\n                     <Grid.Row verticalAlign='middle'>\n                        <Divider vertical>\n                           <Segment circular inverted style={square}>\n                              <Header as='h3' inverted>OR</Header>\n                           </Segment>\n                        </Divider>\n                        <Grid.Column className='answer'>\n                           <VoteCard isSelected={answer === \"optionOne\"} isAnswered={answer != null} item={optionOne}\n                                     totalVotes={totalVotes}\n                                     onAnswerSelected={handleAnswerSelected} value={'optionOne'}/>\n\n                        </Grid.Column>\n                        <Grid.Column className='answer'>\n                           <VoteCard isSelected={answer === \"optionTwo\"} isAnswered={answer != null} item={optionTwo}\n                                     totalVotes={totalVotes}\n                                     onAnswerSelected={handleAnswerSelected} value={'optionTwo'}/>\n                        </Grid.Column>\n                     </Grid.Row>\n                  </Grid>\n               </div>\n            )}\n            {!isAnswerMode && optionOne && <span>{optionOne.text.substring(0, 10)}...</span>}\n         </Card.Content>\n         {onOpenQuestion && <Card.Content>\n            <Button fluid onClick={handleOpenQuestion}>View poll</Button>\n         </Card.Content>}\n      </Card>\n   );\n};\n\nQuestionCard.propTypes = {\n   user: PropTypes.object,\n   question: PropTypes.object,\n   isAnswerMode: PropTypes.bool,\n   onClickBack: PropTypes.func,\n   onOpenQuestion: PropTypes.func,\n   onAnswerSelected: PropTypes.func,\n};\n\nexport default QuestionCard;\n","/**\n * @description Filter questions by chosen category\n * @param {array} questions\n * @param {string} filterBy\n * @param {string} userId\n * @returns {array} Array that contains only the category chosen\n */\nexport const filterQuestions = (questions = [], filterBy = 'unanswered', userId) => questions.filter((e) => {\n   if (filterBy === 'all') {\n      return true\n   }\n   const doesUserVote = doesUserVoteInThisQuestion(e, userId);\n   if (filterBy === 'answered' && doesUserVote) {\n      return true;\n   }\n   return filterBy === 'unanswered' && !doesUserVote;\n\n});\n\n/**\n * @description Sort questions by timestamp\n * @param {array} questions\n * @returns {array} Array that contain all the questions sorted\n */\nexport const orderQuestions = (questions = []) => questions.sort((a, b) => b.timestamp - a.timestamp);\n\n\n/**\n * @description Compare the question with the user provided to know if the user vote in the question\n * @param {object} question\n * @param {string} userId\n * @returns {boolean} True or False depending if the user vote in the question\n */\nexport const doesUserVoteInThisQuestion = (question = {}, userId = \"\") => {\n   if (question.optionOne && question.optionOne.votes.includes(userId)) {\n      return true;\n   }\n   return !!(question.optionTwo && question.optionTwo.votes.includes(userId));\n};\n","// Libraries\nimport React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {Container, Segment, Card, Form, Radio, Loader, Dimmer} from \"semantic-ui-react\";\n\n// Actions\nimport questionActions from \"../../../actions/questions.action\";\n\n// Components\nimport QuestionCard from \"../../../components/question-card/QuestionCard\";\n\n// Utils\nimport {filterQuestions, orderQuestions} from \"./Questions.util\";\nimport {convertObjectToArray} from \"../../../utils\";\n\n// Style\nimport './Questions.css'\n\n// All filter options available for the user\nconst filterByOptions = [{\n   key: 'unanswered',\n   value: 'unanswered',\n   text: 'Unanswered'\n}, {\n   key: 'answered',\n   value: 'answered',\n   text: 'Answered'\n}, {\n   key: 'all',\n   value: 'all',\n   text: 'All'\n},];\n\nclass QuestionsPage extends Component {\n   state = {\n      filterBy: 'unanswered'\n   };\n   handleOpenQuestion = (id) => this.props.history.push(`/questions/${id}`);\n\n   handleFilterByChange = (e, {value}) => this.setState({filterBy: value});\n\n   render() {\n      const {filterBy} = this.state;\n      const {questions, users, authenticatedUserId, isFetching} = this.props;\n      // Convert the questions to an array, filter the questions by user input and ordered by date of creation before\n      // being show in the ui\n      const questionList = orderQuestions(filterQuestions(convertObjectToArray(questions), filterBy, authenticatedUserId));\n      return (\n         <Container className='QuestionsPage'>\n            <Dimmer active={isFetching}>\n               <Loader/>\n            </Dimmer>\n            <Segment>\n               <Segment basic>\n                  <Form className='toolbar'>\n                     <Form.Group widths='equal'>\n                        <Form.Group inline className='left-options'>\n                           <label>Show: </label>\n                           {filterByOptions.map((e) => (\n                              <Form.Field\n                                 key={e.key}\n                                 control={Radio}\n                                 label={e.text}\n                                 value={e.value}\n                                 checked={filterBy === e.value}\n                                 onChange={this.handleFilterByChange}\n                              />\n                           ))}\n                        </Form.Group>\n                     </Form.Group>\n                  </Form>\n               </Segment>\n               <Card.Group centered>\n                  {questionList && questionList.map((e) => (\n                     <QuestionCard key={e.id} question={e} author={users[e.author]}\n                                   onOpenQuestion={this.handleOpenQuestion}/>\n                  ))}\n               </Card.Group>\n            </Segment>\n         </Container>\n      );\n   }\n}\n\nQuestionsPage.propTypes = {};\n\nconst mapStateToProps = (state) => {\n   const users = state.users.data;\n   const {user = {}} = state.authentication;\n   return {\n      users,\n      isFetching: state.questions.isFetching,\n      questions: state.questions.data,\n      authenticatedUserId: user.id\n   }\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n   addQuestion: (optionOneText, optionTwoText) => dispatch(questionActions.add(optionOneText, optionTwoText))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsPage);\n","// Libraries\nimport React, {Component} from 'react';\nimport {Container, Segment} from \"semantic-ui-react\";\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\n\n// Actions\nimport questionActions from \"../../../actions/questions.action\";\n\n// Components\nimport QuestionCard from \"../../../components/question-card/QuestionCard\";\n\n// Utils\nimport {isEmptyObject} from \"../../../utils\";\n\nclass QuestionDetailPage extends Component {\n   // This function handle when the user click on a answer\n   handleAnswerSelected = (answer) => {\n      const id = this.getQuestionId();\n      this.props.setAnswer(id, answer)\n   };\n\n   // This function handle when the user click on the back button\n   handleBack = () => {\n      this.props.history.push('/');\n   };\n\n   getQuestionId = () => {\n      const {match} = this.props;\n      if (match != null) {\n         return match.params.id;\n      }\n   };\n\n   render() {\n      const {authenticatedUser, users, questions, isFetching} = this.props;\n      const id = this.getQuestionId();\n      const question = questions[id] || {};\n      const user = authenticatedUser || {};\n      const author = users[question.author] || {};\n\n      // Validate if the user access to a question through the URL and the question is not created\n      const questionNotFound = questions && !isEmptyObject(questions) && isEmptyObject(question);\n\n      return (\n         <Container>\n            <Segment basic>\n               {!questionNotFound && (\n                  <QuestionCard fluid={true} question={question} user={user} author={author} isAnswerMode={true}\n                                onClickBack={this.handleBack} isLoading={isFetching}\n                                onAnswerSelected={this.handleAnswerSelected}/>\n               )}\n               {questionNotFound && <Redirect to='/404'/>}\n            </Segment>\n         </Container>\n      );\n   }\n}\n\n\nQuestionDetailPage.propTypes = {};\n\nconst mapStateToProps = (state) => {\n   const users = state.users.data;\n   const {user = {}} = state.authentication;\n   return {\n      isFetching: state.questions.isFetching || state.users.isFetching,\n      users,\n      questions: state.questions.data,\n      authenticatedUser: users[user.id]\n   }\n};\nconst mapDispatchToProps = (dispatch) => ({\n   setAnswer: (id, answer) => dispatch(questionActions.setAnswer(id, answer)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionDetailPage);\n","// Libraries\nimport React from 'react';\nimport {Container, Header, Segment} from \"semantic-ui-react\";\nimport {Link} from \"react-router-dom\";\n\n// This page will show up when the user tries to access a question that doesn't exist's\nconst QuestionNotFoundPage = () => {\n   return (\n      <Container>\n         <Segment style={{textAlign:'center'}}>\n            <Header as='h1'>404</Header>\n            <Header as='h2'>Question not found</Header>\n            <div>Please go back to the <Link to='/'>Home page</Link></div>\n         </Segment>\n      </Container>\n   );\n};\n\n\nQuestionNotFoundPage.propTypes = {};\n\nexport default QuestionNotFoundPage;\n","// Libraries\nimport React from 'react';\nimport {Dropdown, Image, Menu} from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\n\nconst Header = ({onClickItem, onClickLogout, active, user = {}}) => {\n\n   // This function will handle when the user click on a menu item\n   const handleItemClick = (route) => {\n      if (onClickItem) {\n         onClickItem(route);\n      }\n   };\n\n   // This function will handle when the user click on the log out button\n   const handleItemClickLogOut = () => {\n      if (onClickLogout) {\n         onClickLogout();\n      }\n   };\n\n   return (\n      <div>\n         <Menu pointing secondary>\n            <Menu.Item\n               name='Home'\n               active={active === '/'}\n               onClick={() => handleItemClick('/')}\n            />\n            <Menu.Item\n               name='New question'\n               active={active === '/add'}\n               onClick={() => handleItemClick('/add')}\n            />\n            <Menu.Item\n               name='Leader board'\n               active={active === '/leaderboard'}\n               onClick={() => handleItemClick('/leaderboard')}\n            />\n            <Menu.Menu position='right'>\n               <Dropdown\n                  trigger={<span><Image avatar src={user.avatarURL}/> {user.name}</span>}\n                  item>\n                  <Dropdown.Menu>\n                     <Dropdown.Item onClick={handleItemClickLogOut}>Logout</Dropdown.Item>\n                  </Dropdown.Menu>\n               </Dropdown>\n            </Menu.Menu>\n         </Menu>\n      </div>\n   );\n};\n\nHeader.propTypes = {\n   user: PropTypes.object,\n   active: PropTypes.string,\n   onClickItem: PropTypes.func,\n   onClickLogout: PropTypes.func,\n};\n\nexport default Header;\n","// Libraries\nimport React, {Component} from 'react';\nimport {Route} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\n// Actions\nimport questionActions from \"../../actions/questions.action\";\nimport authenticationActions from \"../../actions/authentication.action\";\n\n// Pages\nimport NewQuestionPage from './new-question/NewQuestion.page';\nimport LeaderBoardPage from './leaderboard/LeaderBoard.page';\nimport QuestionsPage from './questions/Questions.page';\nimport QuestionsDetailPage from './question-detail/QuestionDetail.page';\nimport QuestionNotFoundPage from \"./question-not-found/QuestionNotFound.page\";\n\n// Components\nimport Header from \"../../components/header/Header\";\n\nclass HomePage extends Component {\n   componentDidMount() {\n      this.props.loadQuestions();\n   }\n\n   // This function handle when the user selected an option from the header\n   handleChangeRoute = (route) => this.props.history.push(route);\n\n   // This function handle all logic when the user click the log out button\n   handleLogout = () => this.props.logout();\n\n   render() {\n      const {location = {}, userAuthenticated} = this.props;\n      return (\n         <div>\n            <Header active={location.pathname} onClickItem={this.handleChangeRoute} onClickLogout={this.handleLogout}\n                    user={userAuthenticated}/>\n            <Route path='/' component={QuestionsPage} exact={true}/>\n            <Route path='/add' component={NewQuestionPage} exact={true}/>\n            <Route path='/leaderboard' component={LeaderBoardPage} exact={true}/>\n            <Route path=\"/questions/:id\" component={QuestionsDetailPage} exact={true}/>\n            <Route path=\"/404\" component={QuestionNotFoundPage} exact={true}/>\n         </div>\n      );\n   }\n}\n\nHomePage.propTypes = {};\n\nconst mapStateToProps = (state) => {\n   const users = state.users.data;\n   const {id} = state.authentication.user;\n   return {\n      users,\n      userAuthenticated: users[id]\n   }\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n   logout: () => dispatch(authenticationActions.logout()),\n   loadQuestions: () => dispatch(questionActions.load()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\n","// API\nimport {_getUsers} from \"../utils/_DATA\";\n\n/**\n * @description This functions returns an object with all you need trigger the fetching of users\n * @returns {object} object with all you need to trigger the fetching action\n */\nconst FETCHING_REQUEST = () => ({\n   type: 'IS_FETCHING_USERS',\n   response: true\n});\n\n/**\n * @description This functions returns an object with all you need to load the users\n * @param {object} users\n * @returns {object} object with all you need to trigger the load users action\n */\nconst LOAD_USERS_SUCCESS = (users) => ({\n   type: 'LOAD_USERS_SUCCESS',\n   response: users\n});\n\n/**\n * @description Action that load all users from the API\n */\nexport const load = () => async (dispatch) => {\n   // Let know the application that we are fetching the users\n   dispatch(FETCHING_REQUEST());\n   const users = await _getUsers();\n   // Load users in the store state\n   dispatch(LOAD_USERS_SUCCESS(users));\n};\n\n\nexport default {load}\n","// Libraries\nimport React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {BrowserRouter, Switch} from \"react-router-dom\";\n\n// Custom routes\nimport PublicRoute from \"./routers/PublicRoute\";\nimport PrivateRoute from \"./routers/PrivateRoute\";\n\n// Pages\nimport LoginPage from \"./pages/login/Login.page\";\nimport HomePage from \"./pages/home/Home.page\";\n\n// Actions\nimport userActions from \"./actions/users.action\";\n\n// Style\nimport './App.css';\n\nclass App extends Component {\n   componentDidMount() {\n      this.props.loadUsers();\n   }\n\n   render() {\n      return (\n         <div className=\"App\">\n            <BrowserRouter basename='/Would-you-rather'>\n               <Switch>\n                  <PublicRoute exact={true} path='/login' component={LoginPage}/>\n                  <PrivateRoute path='/' component={HomePage}/>\n               </Switch>\n            </BrowserRouter>\n         </div>\n      );\n   }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n   loadUsers: () => dispatch(userActions.load()),\n});\n\nexport default connect(undefined, mapDispatchToProps)(App);\n","// Libraries\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport 'semantic-ui-css/semantic.min.css'\n\n// Data\nimport store from './store';\n\n// App\nimport App from './App';\n\n// Style\nimport './index.css';\n\nReactDOM.render(\n   <Provider store={store}>\n      <App/>\n   </Provider>,\n   document.getElementById('root')\n);\n"],"sourceRoot":""}